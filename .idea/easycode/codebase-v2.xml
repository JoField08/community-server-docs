<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/server/webHelpCCS2-all/besonderheiten.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/config.json;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/cosmetics.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/create-shop.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/custom-enchantments.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/economy.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/fragen.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/HelpTOC.json;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/how-to-join.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/index.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/make-shop.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/map-downloads.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/plots.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/quotes.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/rules.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/servers.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/shop-verwalten.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/shops.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/support.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/TestFile.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/verified-mods.html;C:/Users/Deniz/WritersideProjects/community-server-docs/server/webHelpCCS2-all/welcome.html;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/cfg/buildprofiles.xml;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/cfg/glossary.xml;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/questions/Fragen.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/tutorial/tutorial-site.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/contribution/contribution.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/contribution/doc-contribution.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/rules/rules.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/rules/verified-mods.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/shops/create-shop.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/shops/delete-shop.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/shops/make-shop.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/shops/manage-shop.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/shops/shops.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/cosmetics.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/custom-enchantments.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/economy.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/how-to-join.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/map-downloads.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/plots.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/servers.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/specials.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/subsites/support.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/welcome/Welcome.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/fork-repo.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/install-writerside.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/update-project.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/topics/write-documentation.md;C:/Users/Deniz/WritersideProjects/community-server-docs/Writerside/redirection-rules.xml;C:/Users/Deniz/WritersideProjects/community-server-docs/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/Deniz/WritersideProjects/community-server-docs&quot;:&quot;{\&quot;/server/webHelpCCS2-all/how-to-join.html\&quot;:\&quot;This HTML file provides help documentation for joining a Minecraft server called \\\&quot;Community Server\\\&quot;.\\n\\nKey functions:\\n\\n- Provides instructions on how to join the server, including needing the Java Edition version 1.20.1 of Minecraft. \\n\\n- Explains that most of the server is behind a whitelist and only certain public areas like the hub and PvP server can be accessed without being whitelisted. \\n\\n- Details how to request a whitelist by creating a ticket on their Discord server to access survival and shop areas. \\n\\n- Lists requirements to play on the survival area, including connecting Discord to Twitch, following their Twitch channel, and not leaving Discord after being accepted. \\n\\n- Provides the server IP address for joining. \\n\\n- Includes last modified date, feedback section, and navigation links to previous/next help pages.\\n\\n- Uses HTML structure, headings, paragraphs, lists and links to clearly layout the joining instructions and requirements.\\n\\nSo in summary, it is a help documentation page providing the necessary information for a user to join and play on the Community Server Minecraft network.\&quot;,\&quot;/server/webHelpCCS2-all/shops.html\&quot;:\&quot;This HTML file displays documentation for the \\\&quot;Shops\\\&quot; topic in the Community Server help documentation.\\n\\nKey functions:\\n\\n- Provides the page title, header and navigation for the help documentation site\\n- Displays the main content article about Shops \\n- Includes formatting for things like headings, paragraphs, code blocks, notes\\n- Renders the last modified date for the topic\\n- Includes feedback and previous/next navigation links\\n- Loads necessary CSS and JavaScript files for formatting and functionality\\n- Includes metadata like Open Graph tags for social sharing\\n- Renders Disqus comments component if configured\\n\\nIn summary, it displays a help documentation article on the topic of \\\&quot;Shops\\\&quot; within the larger structure and styling of the Community Server help documentation site. The key purpose is to provide information and instructions to users about shops in an accessible and readable format.\&quot;,\&quot;/server/webHelpCCS2-all/shop-verwalten.html\&quot;:\&quot;This HTML file provides instructions for managing a shop on the Community Server. Some key things it does:\\n\\n- Provides step-by-step instructions on how to adjust shop prices, quantities of items for sale, add/remove items from the shop inventory, set buy prices, and add/edit the shop description.\\n\\n- Includes images to illustrate the shop management menu and interface. \\n\\n- Formats the instructions as an ordered list for each task (adjust prices, quantities, etc). \\n\\n- Includes additional notes, tips and warnings to provide context or caveats.\\n\\n- Renders the page with common documentation elements like navigation links, last updated date, feedback section. \\n\\n- Uses HTML5 elements, CSS styling and JSON scripts to control things like table of contents, shortcuts, templates.\\n\\nSo in summary, its key functions are to clearly explain the shop management interface and walk the user through each task using a structured, illustrated format typical of technical documentation pages.\&quot;,\&quot;/Writerside/redirection-rules.xml\&quot;:\&quot;This XML file defines redirection rules for a website. Some key things it does:\\n\\n- Defines rules for redirecting requests for old/removed pages to new pages. Each rule has a unique ID.\\n\\n- Each rule specifies the page(s) it accepts requests for using the \\u003caccepts\\u003e element. This defines the old page path/URL. \\n\\n- Rules can have an optional \\u003cdescription\\u003e to explain the purpose of the redirection.\\n\\n- When a request comes in for a page specified in an \\u003caccepts\\u003e element, it will be redirected according to that rule.\\n\\n- This allows pages that were removed or renamed to still redirect visitors to the new location, preventing broken links.\\n\\n- The key functions are:\\n\\n1. Define redirection mappings from old to new pages \\n2. Give each rule a unique ID\\n3. Specify the old page path/URL being redirected \\n4. Optionally describe the redirection rule\\n5. Provide a mechanism to redirect requests for old pages to their new locations\\n\\nSo in summary, it centrally defines and manages URL redirection rules for the website.\&quot;,\&quot;/server/webHelpCCS2-all/quotes.html\&quot;:\&quot;This HTML file displays a page of quotes from the Community Server documentation.\\n\\nKey functions:\\n\\n- Displays the page title \\\&quot;Zitate\\\&quot; (Quotes)\\n- Renders a table with columns for the quote, person, and date\\n- Includes some sample quotes with attribution and dates\\n- Includes last modified date footer\\n- Includes navigation links to previous and next pages\\n- Sets up metadata like Open Graph tags for social sharing\\n- Includes scripts to handle things like the table of contents navigation \\n\\nSo in summary, it is presenting a simple quotes page with some sample quotes in a table, along with metadata and navigation to integrate it into the larger documentation site. The key purpose is to display a curated list of quotes from the Community Server project.\&quot;,\&quot;/server/webHelpCCS2-all/map-downloads.html\&quot;:\&quot;This HTML file displays a web page with information about map downloads for different versions of the Community Server game.\\n\\nKey functions:\\n\\n- Provides the page title and header \\\&quot;Map Downloads\\\&quot;\\n- Displays a list of different Community Server versions (1.19 and 1.18)\\n- For each version, provides links to:\\n  - A YouTube video of a tour of the map\\n  - A download link for the map file \\n  - A link to a spreadsheet with important coordinates\\n- Includes metadata like page description, keywords, author etc for SEO purposes\\n- Renders previous/next navigation links at the bottom to browse related pages\\n- Includes scripts to handle things like the table of contents, feedback form etc\\n\\nSo in summary, it presents download links and information for Community Server game maps in an organized and accessible way for users to find and access relevant map files. The metadata and navigation aids discoverability and usability of the content.\&quot;,\&quot;/Writerside/topics/welcome/subsites/how-to-join.md\&quot;:\&quot;This file provides instructions for players on how to join the server. Some key points:\\n\\n- It specifies the required Minecraft Java Edition version to play on the server.\\n\\n- It explains that most of the server is behind a whitelist and lists the public areas that can be accessed without being whitelisted (hub, PvP, events). \\n\\n- It instructs players to create a whitelist ticket on the Discord server if they want to access the survival and shop areas, which require whitelisting. \\n\\n- It notes that players will be added to the whitelist once staff have time to process the request, asking for patience. \\n\\n- It lists the requirements to play in the survival area, which include creating a Discord ticket, connecting Discord and Twitch accounts, and following a Twitch channel. \\n\\n- It provides the IP address for players to connect to the server and wishes them fun.\\n\\nIn summary, this file\\u0027s key functions are to inform players about:\\n- The Minecraft version required\\n- What areas are public vs whitelist-only  \\n- How to request a whitelist \\n- The requirements to play in specific game modes\\n- The server IP address\&quot;,\&quot;/Writerside/cfg/glossary.xml\&quot;:\&quot;This file is an XML glossary file that defines terms and their definitions.\\n\\nKey functions:\\n\\n- It defines the document type as a glossary using the specified DTD (Document Type Definition) file. This provides the structure and validation for the glossary elements.\\n\\n- The \\u003cterms\\u003e root element contains multiple \\u003cterm\\u003e elements. \\n\\n- Each \\u003cterm\\u003e has a \\\&quot;name\\\&quot; attribute which is the term being defined. The text content of the \\u003cterm\\u003e provides the definition.\\n\\n- This allows the glossary to define multiple terms and their plain text definitions in a structured format.\\n\\n- The glossary file could then be used by other applications to look up definitions for terms, display tooltips, integrate with spelling/grammar checkers, and more based on the terms and definitions provided.\\n\\n- Additional attributes could be added to \\u003cterm\\u003e elements to provide more metadata like the term language, context, related terms, etc. \\n\\nSo in summary, it defines a reusable glossary of terms and definitions in XML format that could then be utilized by other natural language processing tools and applications.\&quot;,\&quot;/server/webHelpCCS2-all/config.json\&quot;:\&quot;This file appears to be a configuration JSON file for a web help/documentation site for the Community Server product from CastCrafter.\\n\\nSome key things it is configuring:\\n\\n- Product details like version, ID, stage of release\\n- Title and logo to display \\n- Search settings like maximum number of hits\\n- Product name to display\\n- Footer content including copyright, social media links, and other footer links\\n\\nSo in summary, it is centrally defining configuration settings like branding, product details, and other UI elements that would be used across the documentation site. This allows things like the product name, version, footer etc. to be defined in one place and then referenced dynamically wherever needed in the site. It centralizes the configuration rather than having these details hardcoded in multiple places.\&quot;,\&quot;/Writerside/topics/fork-repo.md\&quot;:\&quot;This file provides instructions for forking a GitHub repository.\\n\\nThe key functions of the file are:\\n\\n- It describes how to fork the Community Server Documentation repository on GitHub. It provides a step-by-step procedure with screenshots.\\n\\n- Forking a repository creates a copy of the repository on the user\\u0027s GitHub account. This allows the user to make changes to the copy without affecting the original. \\n\\n- After forking, the user can make changes to their copy and then submit a pull request to propose merging those changes into the original repository.\\n\\n- By forking the repository, the user gains the ability to contribute to the documentation by submitting pull requests from their forked copy on their own account.\\n\\n- It explains what a fork is - a copy of a repository that allows the user to make edits separately from the original.\\n\\nSo in summary, the file guides users through the process of forking a repository to enable them to contribute changes back via pull requests, and explains the purpose and function of forking a repository on GitHub.\&quot;,\&quot;/Writerside/topics/welcome/Welcome.md\&quot;:\&quot;This file is a welcome page for a community Minecraft server. Some key things it does:\\n\\n- Introduces the server and who it is intended for (viewers of a Twitch stream)\\n\\n- Mentions how players can join the server and what to be aware of \\n\\n- Explains the philosophy of allowing more freedoms on this server compared to others, with fewer restrictions\\n\\n- Gives some examples of things that are allowed like various farms, TNT duping, using the Nether roof, and elytra\\n\\n- Styles a warning in bold to read all pages before joining \\n\\n- Provides a link to the rules page to understand what is and isn\\u0027t allowed on the server\\n\\nSo in summary, its main functions are:\\n\\n- Welcoming and introducing new players \\n- Explaining the server\\u0027s philosophy and allowed activities\\n- Directing players to read the rules before joining\\n- Linking to the rules page for more details\&quot;,\&quot;/Writerside/topics/write-documentation.md\&quot;:\&quot;Dieser Markdown-File beschreibt den Prozess, wie man neue Dokumentationsseiten in GitBook erstellt.\\n\\nDie wichtigsten Funktionen dieses Files sind:\\n\\n- Es erklärt Schritt-für-Schritt, wie man eine neue leere Markdown-Datei anlegt.\\n\\n- Es gibt Hinweise zur Namensgebung der Datei, z.B. dass man Leerzeichen durch Bindestriche ersetzen und alles klein schreiben soll.\\n\\n- Es zeigt, wie man die neue Datei Git hinzufügt und committet. \\n\\n- Es erklärt, wie man die Datei dann in den richtigen Ordner im Projekt verschieben kann.\\n\\n- Es verlinkt auf andere Dokumentationsseiten wie die Update-Anleitung.\\n\\n- Es nutzt Markdown-Syntax wie Überschriften, Listen, Bilder und Notizen, um den Prozess gut verständlich zu dokumentieren.\\n\\nInsgesamt dient dieser File dazu, Autoren und Nutzern des Projekts den Prozess des Erstellens neuer Dokumentationsseiten in GitBook zu erklären und Schritt-für-Schritt vorzuführen.\&quot;,\&quot;/Writerside/cfg/buildprofiles.xml\&quot;:\&quot;This file is called buildprofiles.xml and is used to configure build profiles and variables for the Writerside static site generator.\\n\\nSome key functions:\\n\\n- Defines global variables that can be used across build profiles, like primary color, color preset, header logo, max search results etc. \\n\\n- Allows defining multiple build profiles for different instances (like a community site vs blog). Here it defines a profile for \\\&quot;ccs\\\&quot;.\\n\\n- Each build profile can override the global variables.\\n\\n- Configures the footer section with copyright, social links and other links. \\n\\n- Uses an XML schema to validate the structure and allowed elements.\\n\\nSo in summary, it centralizes configuration for things like colors, logos, indexing settings etc and allows defining profiles for different sites/instances that are generated from the same Writerside project. This makes it easy to manage configurations and build multiple sites from the same codebase.\&quot;,\&quot;/Writerside/topics/welcome/subsites/shops/make-shop.md\&quot;:\&quot;This Markdown file provides instructions for players on how to create a shop in Minecraft.\\n\\nKey functions:\\n\\n- Explains that shops can be created on both the survival and shop servers, but can only be used on the shop server.\\n\\n- Provides the crafting recipe needed to make a shop, which requires 4 gold blocks and 1 chest. Includes an image and step-by-step instructions. \\n\\n- Links to another Markdown file \\\&quot;create-shop.md\\\&quot; which presumably contains more detailed instructions for actually creating the shop.\\n\\n- Includes a collapsible section with instructions for how to buy and sell items from other players\\u0027 shops once shops are set up - using item frames to buy and hoppers to sell.\\n\\n- Uses Markdown formatting like headings, lists, images, and code blocks to structure and display the information clearly for players.\\n\\n- Is meant to be included in the game\\u0027s documentation/help system to teach players how to participate in the shop/trading aspect of the Minecraft server.\\n\\nSo in summary, it provides the core instructions for the crafting recipe and shop creation process within the game\\u0027s context.\&quot;,\&quot;/Writerside/topics/welcome/subsites/plots.md\&quot;:\&quot;This Markdown file provides information about plots/land claiming on the server. Some key points:\\n\\n- It explains the land claiming/protection system - players can claim a limited number of blocks as plots to build on privately. Plots can have up to 8 corners defined with redstone torches.\\n\\n- It provides instructions on how to claim a new plot using the /protect command and placing redstone torches. Players must be at least 200 blocks from spawn. \\n\\n- It explains how to expand an existing plot by going to \\\&quot;My Plots\\\&quot; in /protect and clicking \\\&quot;Expand Plot\\\&quot;. Owners can also add/remove members and adjust settings. \\n\\n- It provides the /pwho command to check plot ownership and some coordinates of the plot.\\n\\n- It includes a note using a warning style about using /unstuck only if actually stuck, not to bypass spawn restrictions. \\n\\n- There is formatting like images, code blocks, headings, lists and other Markdown elements to enhance readability.\\n\\nSo in summary, this file explains the land claiming system and provides instructions for players to claim and manage their plots on the server.\&quot;,\&quot;/Writerside/topics/welcome/subsites/servers.md\&quot;:\&quot;This file describes the different servers available on the community Minecraft server. Its key functions are:\\n\\n- Introduces the different server types (Survival, Shop, Hub, PvP)\\n- Briefly describes the purpose and gameplay of each server \\n- Links to other files/pages that provide more details about certain aspects:\\n  - Specials.md for Survival server changes from vanilla\\n  - Shops.md for how to open a shop\\n  - PvP.md for more info on the PvP server\\n- Uses Markdown formatting for headings, lists, links etc. to structure the information clearly\\n\\nIn summary, it serves as an introductory page to orient new players on the different gameplay options available across the multiple servers, and links to more in-depth explanations of certain features. The goal is to explain the server setup and help players understand where to go for different activities.\&quot;,\&quot;/Writerside/topics/welcome/subsites/shops/manage-shop.md\&quot;:\&quot;This file provides instructions for managing a shop in the game/world. Some key points:\\n\\n- It contains procedures (step-by-step instructions) for common shop management tasks like adjusting prices, quantities, adding/removing items for sale, buying items, editing the description, and changing the shop\\u0027s appearance.\\n\\n- Each procedure has collapsible steps to hide/show the instructions. \\n\\n- Images and formatting are used to clearly illustrate the UI elements being referenced.\\n\\n- Tips, notes and warnings are included to provide additional context or caveats.\\n\\n- The main functions covered are:\\n  - Adjusting shop item prices, quantities and buying prices\\n  - Adding or removing items for sale \\n  - Editing the shop description\\n  - Changing the shop\\u0027s visual appearance\\n\\n- The goal is to teach players how to effectively manage their shop and control what is for sale, at what prices, etc. within the game/world\\u0027s shop system.\\n\\nSo in summary, this file provides interactive step-by-step guides for common shop management and customization tasks in the game/world.\&quot;,\&quot;/server/webHelpCCS2-all/rules.html\&quot;:\&quot;This HTML file defines a set of rules or guidelines for players on a Minecraft community server. \\n\\nKey functions:\\n\\n- Provides an introduction stating that friendly and respectful behavior is expected.\\n\\n- Lists specific prohibited behaviors like griefing, hacking, cheating, harassment, scamming, boosting/trading outside the game. \\n\\n- Allows some client-side mods but prohibits anything that modifies server-client communication or automates gameplay. \\n\\n- States that destroying or stealing from unclaimed areas requires owner permission. \\n\\n- Says moderators and admins have final say, even if rules seem contradictory. Players should not argue but comply.\\n\\n- Uses formatting like headings, paragraphs, lists, and links to clearly present the rules. \\n\\n- Includes navigation links to other help pages like the verified mods page.\\n\\n- Renders the page layout and styles it to look like documentation/help for the community server software.\\n\\nSo in summary, it defines a code of conduct and prohibited behaviors to maintain a friendly multiplayer environment on the Minecraft community server.\&quot;,\&quot;/server/webHelpCCS2-all/HelpTOC.json\&quot;:\&quot;This file defines the table of contents (TOC) for a website help documentation in JSON format. \\n\\nSome key things it does:\\n\\n- Defines the structure of pages in a hierarchical/nested format using \\\&quot;level\\\&quot;, \\\&quot;parentId\\\&quot; properties. This allows building a multi-level TOC.\\n\\n- Gives each page a unique \\\&quot;id\\\&quot; and defines properties like \\\&quot;title\\\&quot;, \\\&quot;url\\\&quot; to represent it. \\n\\n- Pages can have child pages defined in the \\\&quot;pages\\\&quot; array property. \\n\\n- Sets the tabIndex to define the display order of pages in the TOC.\\n\\n- The \\\&quot;topLevelIds\\\&quot; array defines which pages appear at the top level of the TOC without being nested under another page.\\n\\n- The JSON format makes it easy for the documentation site to programmatically parse this structure and build the interactive TOC navigation.\\n\\n- Provides all the necessary information needed in one place to dynamically generate a multi-level table of contents for the help documentation.\\n\\nSo in summary, the key functions are to define the hierarchical structure and metadata for all pages in the documentation TOC in a structured JSON format that can be easily processed programmatically.\&quot;,\&quot;/server/webHelpCCS2-all/verified-mods.html\&quot;:\&quot;This HTML file provides information about verified mods that are allowed to be used on the community server.\\n\\nKey functions:\\n\\n- Lists mods that have been verified by the server team as being safe and allowed to use. They are organized into tabs for CurseForge and Modrinth.\\n\\n- Provides links to each mod\\u0027s page on CurseForge or Modrinth so users can easily find and download them. \\n\\n- Warns users that MouseWheelie mod is not compatible with the server despite being labeled as client-side only. \\n\\n- Includes navigation links to other help pages like rules and how to join the server.\\n\\n- Renders the page layout and styling using CSS. \\n\\n- Allows user comments on the page content through inclusion of a Disqus comments widget.\\n\\nSo in summary, it provides an authoritative list of approved mods for the community server along with relevant information, links and navigation to help users configure their game properly to play on the server.\&quot;,\&quot;/Writerside/topics/welcome/subsites/map-downloads.md\&quot;:\&quot;This file provides links to download maps and resources from previous versions of the Minecraft community server.\\n\\nKey functions:\\n\\n- Lists map downloads and links for versions 1.19 and 1.18 of the community server. \\n\\n- For each version, it provides:\\n  - A link to a YouTube video of a final tour of the map\\n  - A direct download link to the map world save file \\n  - A link to a Google Sheet containing important coordinates on the map\\n\\n- Allows users to easily access and download past maps from the community server to explore or use for reference. \\n\\n- Provides coordinates for points of interest to help users navigate and find locations on the downloaded maps.\\n\\n- Organizes the information by Minecraft version for easy lookup of resources for specific past iterations of the community server world.\\n\\nSo in summary, this file serves as an archive and portal to access past community server maps and supplemental information through direct links.\&quot;,\&quot;/Writerside/topics/install-writerside.md\&quot;:\&quot;This file provides instructions for installing WriterSide, an IDE for writing documentation.\\n\\nThe key functions of this file are:\\n\\n- Explains how to download the latest version of WriterSide from the JetBrains website.\\n\\n- Guides the user through the installation process, including following the installer instructions.  \\n\\n- Instructs the user to install the Conventional Commit plugin within WriterSide.\\n\\n- Tells the user to restart WriterSide to activate the plugin.\\n\\n- Walks through importing a Git repository into WriterSide using the \\\&quot;Get from VCS\\\&quot; option. \\n\\n- Explains how to trust the imported project.\\n\\n- Indicates that the user can now start writing documentation in the opened project.\\n\\nSo in summary, this file provides a step-by-step procedure for downloading, installing, and setting up WriterSide along with importing a Git repository to begin writing documentation. The main purpose is to get the user up and running with the WriterSide IDE.\&quot;,\&quot;/server/webHelpCCS2-all/servers.html\&quot;:\&quot;This HTML file provides information about the different servers on the Community Server.\\n\\nKey functions:\\n\\n- Provides an overview and description of each server type:\\n  - Survival Server - The main server for playing, building, trading with others\\n  - Shop Server - Dedicated economy/trade server for opening shops and selling items\\n  - Hub Server - Contains quests to complete for rewards, NPCs to buy items from\\n  - PvP Server - For player vs player combat\\n\\n- Uses a definition list \\u003cdl\\u003e to organize the server descriptions \\n\\n- Includes links to other pages for more details on features like shops, quests, PvP\\n\\n- Renders navigation links at the bottom to easily move between pages\\n\\n- Includes metadata like page title, descriptions for social sharing\\n\\n- Uses common web documentation styles and components \\n\\nSo in summary, it acts as an introductory page to explain the different multiplayer worlds available on the Community Server and provide links to more in-depth information on specific aspects. The key purpose is to help new players understand the server options.\&quot;,\&quot;/Writerside/topics/welcome/subsites/rules/rules.md\&quot;:\&quot;This file defines the rules and guidelines for player behavior on the Minecraft server. Some key functions:\\n\\n- It establishes that griefing, stealing, destroying other players\\u0027 builds is not allowed and can result in a ban.\\n\\n- It allows for gameplay modifications like mods, as long as they don\\u0027t provide an unfair advantage or modify server-client communication. Hacked clients are forbidden. \\n\\n- Game breaking exploits like item duping or crashing the server are not permitted. \\n\\n- Harassment, scamming, trolling of other players will not be tolerated.\\n\\n- Players are expected to be friendly and respectful towards each other, and try to resolve issues themselves before involving mods. \\n\\n- Boosting or real-money trading is not allowed. Only one account per player. \\n\\n- Moderators and admins have final say, even if decisions contradict the written rules. Players should not argue with moderator instructions.\\n\\nSo in summary, it establishes ground rules around griefing, mods, exploits, player interaction and conduct, trading, and the authority of server staff to enforce policies.\&quot;,\&quot;/server/webHelpCCS2-all/index.html\&quot;:\&quot;This HTML file is used to redirect the user to another page on the site.\\n\\nThe key functions are:\\n\\n- It sets the charset to utf-8 in the \\u003cmeta\\u003e tag.\\n\\n- The title is set to \\\&quot;You will be redirected shortly\\\&quot; to indicate to the user they will be redirected. \\n\\n- The http-equiv\\u003d\\\&quot;refresh\\\&quot; meta tag tells the browser to refresh the page after 0 seconds and redirect to the URL welcome.html.\\n\\n- There is an \\u003ch1\\u003e tag with text \\\&quot;Redirecting...\\\&quot; to display a message while redirecting.\\n\\n- An \\u003ca\\u003e link is provided to welcome.html in case the automatic redirect fails, giving the user a fallback option to click through. \\n\\n- The \\u003cscript\\u003e tag uses the location.href property to programmatically redirect the page to welcome.html, providing a JavaScript fallback if the meta refresh fails for some reason.\\n\\nSo in summary, it uses HTML meta refresh, a fallback link, and JavaScript redirection to ensure the user is redirected from this page to the welcome page. The key purpose is to automatically redirect visitors to another page on the site.\&quot;,\&quot;/Writerside/topics/welcome/subsites/shops/delete-shop.md\&quot;:\&quot;This file provides instructions for deleting a shop on Writerside.\\n\\nKey functions:\\n\\n- Provides a step-by-step procedure for deleting a shop\\n- Explains how to open the shop management \\n- Notes that all items must be removed from the shop first\\n- Links to another file that explains how to remove items\\n- Describes clicking the \\\&quot;Delete Shop\\\&quot; button to complete the deletion\\n\\nThe file gives users clear instructions on navigating to the delete shop option and walking through the deletion process. It also links to related documentation on removing items first. The procedure format makes the steps easy to follow.\&quot;,\&quot;/Writerside/topics/welcome/subsites/shops/shops.md\&quot;:\&quot;This Markdown file is providing information about shops on the server. Some key points:\\n\\n- It is located in the \\\&quot;shops\\\&quot; subdirectory under the \\\&quot;welcome\\\&quot; topic, indicating it contains information specifically about shops.\\n\\n- It introduces that shops can be opened on the Shop Server (linking to another file with server information). This implies shops are a feature available through one of the game/roleplay servers.\\n\\n- It outlines the basic functions of a shop - buying and selling items to earn in-game currency (%main_currency%). \\n\\n- The \\u003e block quotes an introduction that this section will provide information on how to open, manage, and close a shop.\\n\\n- It is formatted using Markdown syntax, suggesting this content is intended for display on a website or wiki about the game/roleplay world.\\n\\nSo in summary, this file serves as a guide or tutorial for players on how the shop system works and how they can participate by opening and running their own shop to trade items. It provides contextual information and instructions for a specific gameplay feature.\&quot;,\&quot;/Writerside/topics/welcome/subsites/economy.md\&quot;:\&quot;This file describes the in-game economy system for a multiplayer game. Some key points:\\n\\n- Players earn the in-game currency (%main_currency%) through a paycheck system based on active playtime. This ties the value of currency to time spent playing to prevent inflation.\\n\\n- The pay rate is %paycheck% %main_currency% per active hour of play. \\n\\n- Currency can be used to claim land/property, engage in trade, and send money to other players with the /pay command.\\n\\n- Trade happens exclusively between players, there is no buying/selling to or from the game server. \\n\\n- Players can set up their own automated shops on separate \\\&quot;shop islands\\\&quot; or trade directly. Shops are deleted if inactive to free up space for new ones.\\n\\nSo in summary, this file outlines:\\n\\n- How players earn in-game currency \\n- What currency can be used for\\n- That the economy is player-driven through trade\\n- Rules around player shops\\n\\nIt provides the core description of the game\\u0027s internal economy system and currency.\&quot;,\&quot;/Writerside/topics/questions/Fragen.md\&quot;:\&quot;This file contains frequently asked questions (FAQ) in the form of collapsible sections for a Minecraft server.\\n\\nKey functions:\\n\\n- Provides answers to common questions players may have about server features, rules, gameplay mechanics etc. \\n\\n- Questions are formatted as collapsible sections that can be expanded/collapsed to view the answer. This helps organize the information.\\n\\n- Answers provide explanations for server design choices like no villagers, disabled elytra in The End, no teleportation etc. \\n\\n- Addresses questions about block limits, obtaining special blocks like light blocks and invisible item frames, armor stand customization.\\n\\n- Links to other documentation files for more details on certain topics.\\n\\n- Acts as a reference that players can check to learn about the server and have common queries addressed without needing to ask staff directly each time.\\n\\nSo in summary, it is a FAQ knowledge base in Markdown format to help players understand how the server works and get answers to frequently asked questions. The collapsible sections help keep it organized.\&quot;,\&quot;/Writerside/topics/welcome/subsites/contribution/doc-contribution.md\&quot;:\&quot;This file provides documentation on contributing to the Writerside documentation. Some key points:\\n\\n- It is located in the Writerside documentation repository under topics/welcome/subsites/contribution, indicating it provides information specifically about contributing to the documentation.\\n\\n- It lists prerequisites for contributing, including having a Github account, installing Writerside, and being able to create pull requests and write clearly/understandably. \\n\\n- The main functions of this file are to:\\n  - Inform potential contributors about what is required to contribute changes to the documentation\\n  - Provide a high-level overview of the contribution process, such as creating pull requests and merging changes\\n  - Set expectations for writing style and quality to ensure contributions are error-free, clear and understandable\\n\\n- It uses Markdown formatting and has a note style block to call out certain information, following the documentation style of the repository.\\n\\nSo in summary, this file serves as a guide for those wanting to contribute to the Writerside documentation by contributing changes through the GitHub repository. It outlines both technical and writing prerequisites.\&quot;,\&quot;/Writerside/topics/welcome/subsites/shops/create-shop.md\&quot;:\&quot;This Markdown file provides instructions for creating a shop in a game or virtual world.\\n\\nKey functions:\\n\\n- Explains how to place a shop by simply placing it in the game world. Indicates the player needs to be on a specific server to do this.\\n\\n- Describes how to set the sell item by holding the item in their hand and using a keyboard shortcut (Shift + right click) on the shop. This will automatically display that item for sale in the shop. \\n\\n- Includes a tip box for emphasis.\\n\\n- Links to another file \\\&quot;manage-shop.md\\\&quot; that provides instructions for managing the shop once created.\\n\\nSo in summary, this file provides step-by-step instructions for players to create a basic shop and set the initial sell item, as well as a link to additional documentation for managing the shop. The focus is on the basic creation and setup process for a shop within this game/world.\&quot;,\&quot;/server/webHelpCCS2-all/fragen.html\&quot;:\&quot;This HTML file displays a set of frequently asked questions (FAQ) for the Community Server.\\n\\nKey functions:\\n\\n- Displays an introductory header and title \\\&quot;Fragen\\\&quot; (Questions)\\n- Contains a section titled \\\&quot;FAQ\\\&quot; to group the questions\\n- Lists multiple questions using \\u003cdt\\u003e tags for the question and \\u003cdd\\u003e tags for the answer\\n- The questions can be expanded/collapsed by clicking on them\\n- Answers contain explanatory text and sometimes links to other pages for more details\\n- Footer shows the last modified date\\n- Includes navigation links to go to the previous page\\n- Uses JSON scripts to define things like the table of contents, shortcuts, metadata\\n- Includes metadata like OpenGraph, Twitter cards for social sharing\\n- Renders the content within a template for consistency across pages\\n\\nSo in summary, it presents a set of commonly asked support questions in an FAQ format to help users find answers to issues they may encounter on the Community Server. The formatting and metadata aims to provide a good user experience for reading the content.\&quot;,\&quot;/Writerside/topics/welcome/subsites/specials.md\&quot;:\&quot;This Markdown file describes some special features or rules on the server:\\n\\n- Key functions:\\n  - It has collapsible sections to hide/show details about different topics\\n  - It explains that villagers are disabled to prevent easy access to end-game items and maintain the value of items in the economy\\n  - It describes the nether portal ratio is changed to 1:4 instead of the default 1:8 to allow for a larger nether world\\n  - Mentions quests will be added over time to provide optional goals/rewards beyond building \\n  - Notes an optional voice chat mod is supported to allow in-game voice communication\\n\\nIn summary, this file provides information to players about some ways the server customizes the vanilla Minecraft experience, such as disabled villagers, changed nether portal ratios, and plans to add quests. It aims to set expectations around these special rules or features.\&quot;,\&quot;/server/webHelpCCS2-all/create-shop.html\&quot;:\&quot;This HTML file provides documentation on how to create a shop in the Community Server game.\\n\\nKey functions:\\n\\n- Provides instructions on how to place a shop by shifting right clicking with an item in your hand. This sets the item as the item for sale in the shop.\\n\\n- Includes a section on how to manage and configure the shop once created, with a link to another documentation page. \\n\\n- Uses common documentation formatting like headings, paragraphs, code blocks, links, etc. to clearly explain the process.\\n\\n- Includes metadata like page title, descriptions, keywords to help with search engine optimization and sharing on social media. \\n\\n- Renders navigation links to other related documentation pages for easy browsing.\\n\\nSo in summary, this page serves as an online help/guide for players to learn how to perform the specific task of creating a shop within the Community Server game through written instructions and formatting typical of technical documentation websites.\&quot;,\&quot;/Writerside/topics/welcome/subsites/support.md\&quot;:\&quot;This Markdown file provides information about support and refunds for a game or server.\\n\\nKey functions:\\n\\n- Explains that support is handled through a ticket system on Discord, and that direct private messages to team members cannot be addressed. This directs users to the proper channel for support.\\n\\n- Outlines the refund policy, stating that only losses directly caused by server issues and proven with evidence (typically a video) will be refunded. \\n\\n- Recommends users enable recording software like ShadowPlay or Radeon ReLive to easily capture video evidence of any issues, as this is typically required for a refund.\\n\\n- Provides links to the ticket channel on Discord and the Discord server invite, centralizing support resources and processes.\\n\\nIn summary, it communicates the support and refund procedures to users, directing them to the appropriate channels and outlining what is/isn\\u0027t eligible for refunds or support. The goal is to make the policies clear and provide tools to facilitate the support and refund processes.\&quot;,\&quot;/server/webHelpCCS2-all/economy.html\&quot;:\&quot;This HTML file provides documentation for the economy system in the Community Server.\\n\\nKey functions:\\n\\n- Explains how players earn the in-game currency \\\&quot;CastCoin\\\&quot; through playing time on the server. They receive 500 CastCoin per active hour of gameplay.\\n\\n- Describes what CastCoin can be used for, like claiming plots of land, trading (between players only), and sending money to other players. \\n\\n- Includes a section on trading/commerce, noting it is only possible between players through direct trades or by setting up automated shops on shop islands. Inactive shops will be deleted over time.\\n\\n- Uses HTML markup like headings, paragraphs, code blocks, etc. to structure the content and make it readable. \\n\\n- Includes things like metadata, scripts, and styling to control things like the page title, OpenGraph tags for social sharing, JSON data for the table of contents, and linking to an external CSS stylesheet for formatting.\\n\\nSo in summary, its key function is to document how the economy and currency system works for players on this particular Minecraft server, to help them understand gameplay mechanics around earning, using, and trading money.\&quot;,\&quot;/server/webHelpCCS2-all/TestFile.html\&quot;:\&quot;This HTML file is used to redirect the user to another page called welcome.html.\\n\\nThe key functions of this file are:\\n\\n- It sets the document type to HTML.\\n\\n- Sets the language to en-US. \\n\\n- Specifies the character encoding as UTF-8.\\n\\n- Sets the title as \\\&quot;You will be redirected shortly\\\&quot;.\\n\\n- Uses the \\u003cmeta http-equiv\\u003d\\\&quot;refresh\\\&quot;\\u003e tag to automatically redirect the user to welcome.html after 0 seconds. \\n\\n- Displays a heading saying \\\&quot;Redirecting...\\\&quot; while the redirection occurs.\\n\\n- Provides a backup link to welcome.html in case the automatic redirection fails for some reason. \\n\\n- Uses a \\u003cscript\\u003e tag to programmatically redirect the page to welcome.html, as a fallback if the \\u003cmeta\\u003e refresh fails.\\n\\nSo in summary, its main purpose is to automatically redirect the user to another page (welcome.html) on page load through both the HTTP refresh header and JavaScript location change, while displaying a message that redirection is occurring. This is commonly used for landing pages that direct users to the main site content.\&quot;,\&quot;/Writerside/topics/welcome/subsites/cosmetics.md\&quot;:\&quot;This Markdown file is providing information about cosmetic items and armor stands in Minecraft.\\n\\nKey functions:\\n\\n- Explains the /hdb command which gives access to a menu to obtain different heads to use for building\\n\\n- Mentions that right clicking with a flint and steel opens a menu to edit armor stand properties, such as giving them arms and rotating body parts separately \\n\\n- Notes that an axe is needed to break armor stands\\n\\n- Contains an image demonstrating heads and armor stands \\n\\n- Provides some introductory information about customizing armor stands \\n\\n- Indicates more detailed information will follow soon\\n\\nSo in summary, this file is documenting and explaining how to access and use cosmetic heads and armor stands in Minecraft for building and decoration purposes. It gives an overview of the relevant commands and tools.\&quot;,\&quot;/Writerside/topics/tutorial/tutorial-site.md\&quot;:\&quot;This Markdown file is used to create a tutorial page for a website. Some key functions and purposes of this file include:\\n\\n- Provide instructional content and guidance for users learning a new topic or system. The Markdown formatting allows for easy creation of headings, lists, paragraphs and other structured content helpful for tutorials.\\n\\n- Explain concepts, features, processes or workflows in a step-by-step manner to help users understand and learn through examples and clear explanations. Tutorial pages break larger topics down into easier to digest sections.\\n\\n- Include screenshots, code samples, or other visual aids to demonstrate concepts and instructions visually in addition to written explanations. Multimedia helps reinforce lessons.\\n\\n- Organize content logically using headings and logical flow so users can easily follow the tutorial from start to finish or jump to relevant sections. Proper structure and organization helps users learn efficiently. \\n\\n- Save as a static Markdown file that can be easily maintained and updated as needed. Markdown is a simple format that doesn\\u0027t require specialized editing software. The file can then be converted and published to HTML for viewing on a website.\\n\\n- Provide a reference resource that users can revisit as needed to refresh their memory or learn new aspects of a topic over time. Effective tutorials act as ongoing learning aids.\&quot;,\&quot;/Writerside/topics/welcome/subsites/contribution/contribution.md\&quot;:\&quot;This file is a Markdown document that is part of a documentation site on Writerside. Based on its filename and location, some key things we can infer:\\n\\n- Purpose: It provides information about how to contribute/contribute to the documentation site. The title \\\&quot;Contribution\\\&quot; and text \\\&quot;Wie du zu dieser Dokumentation beitragen kannst\\\&quot; indicate it is about contributing.\\n\\n- Location: It is located at /Writerside/topics/welcome/subsites/contribution/contribution.md. This suggests it is part of the \\\&quot;contribution\\\&quot; subsite under the main \\\&quot;welcome\\\&quot; topic section of the Writerside documentation site. \\n\\n- Format: It is a Markdown (.md) file, so it uses Markdown formatting syntax to structure the content. \\n\\n- Content: It has a brief title \\\&quot;Contribution\\\&quot; and starts providing information by saying \\\&quot;Wie du zu dieser Dokumentation beitragen kannst, erfährst du [hier]()\\\&quot;. This implies it will explain how to contribute to the documentation, but the link is not defined yet.\\n\\n- Key functions:\\n 1) Provide information on how users can contribute/make changes to the documentation site \\n 2) Be formatted using Markdown for easy reading and maintenance of content\\n 3) Be part of the overall site structure and navigation under the \\\&quot;welcome\\\&quot; and \\\&quot;contribution\\\&quot; sections.\\n\\nSo in summary, this file serves as a documentation page to explain how users can contribute to the Writerside documentation site, as part of the overall site structure.\&quot;,\&quot;/server/webHelpCCS2-all/plots.html\&quot;:\&quot;This HTML file displays documentation about plots (or land claims) in the Community Server game. \\n\\nKey functions:\\n\\n- Provides instructions on how players can claim plots of land for building, including placing redstone torches to mark the boundaries.\\n\\n- Explains how players can expand existing land claims by selecting them in the /protect menu. \\n\\n- Notes some additional commands like /pwho to check land ownership and /unstuck to escape if stuck on someone else\\u0027s property.\\n\\n- Uses standard HTML elements like headings, paragraphs, lists, code snippets to structure and format the content. \\n\\n- Includes images to illustrate concepts like claiming a plot. \\n\\n- Applies styles from external CSS files to control formatting and layout.\\n\\n- Contains metadata like OpenGraph tags for social sharing and JSON-LD for semantic markup.\\n\\n- Uses JavaScript to handle things like the navigation menu, comments, and dynamic content insertion.\\n\\nSo in summary, it is documentation help content for players to understand how to use the land claiming and building protection systems within the Community Server game.\&quot;,\&quot;/server/webHelpCCS2-all/welcome.html\&quot;:\&quot;This HTML file serves as the welcome/introduction page for the Community Server documentation.\\n\\nKey functions:\\n\\n- Provides page title and headings to introduce the topic of the Community Server\\n- Includes some introductory paragraphs describing the purpose and features of the Community Server \\n- Contains links to other relevant pages like the \\\&quot;Rules\\\&quot; page to direct the user to more information\\n- Includes metadata like Open Graph tags, Twitter Cards, and JSON-LD for social sharing and search engine optimization\\n- Renders last modified date to show when the page was last updated\\n- Includes a feedback placeholder to potentially embed comments or feedback functionality\\n- Provides navigation links to guide the user to the next relevant page\\n\\nIn summary, it serves as the landing/home page to introduce users to the Community Server project and guide them to other important pages about rules, features, etc. through descriptive text and call-to-action links. The metadata and scripts work to optimize it for search and social platforms.\&quot;,\&quot;/Writerside/topics/update-project.md\&quot;:\&quot;This file provides instructions for updating a project in Git/GitHub.\\n\\nThe key functions of the file are:\\n\\n- It describes the steps to update a project through the Visual Studio Code interface. This includes opening the main menu, selecting Git, then Update Project.\\n\\n- It warns the user to select \\\&quot;merge\\\&quot; and not \\\&quot;rebase\\\&quot; when updating, to avoid overwriting any local changes. Rebase would lose the local work.\\n\\n- It includes images to illustrate each step of the process. \\n\\n- It provides a TLDR section with keyboard shortcuts to quickly update the project from within VS Code on Windows and macOS. \\n\\n- The procedure is tagged with metadata like a title and ID to help categorize and identify the instructions. \\n\\n- It\\u0027s written in Markdown format so it can be rendered nicely on documentation sites.\\n\\nSo in summary, this file provides step-by-step guidance on how to update a Git project within VS Code, along with warnings and shortcuts, to help developers sync their local code with the remote repository.\&quot;,\&quot;/server/webHelpCCS2-all/besonderheiten.html\&quot;:\&quot;This HTML file displays documentation about some special features of the Community Server.\\n\\nKey functions:\\n\\n- Provides headings and sections to organize the content into different topics like \\\&quot;No Villagers\\\&quot;, \\\&quot;Nether Portals\\\&quot;, etc. \\n\\n- Uses collapse elements to toggle the visibility of section content.\\n\\n- Includes JSON scripts to define the table of contents navigation and metadata like OpenGraph tags.\\n\\n- Links to external downloads for the voice chat mod from different sources like Curseforge and Modrinth. \\n\\n- Renders last modified date at the bottom. \\n\\n- Includes navigation links to previous/next pages.\\n\\n- likely uses the Writerside API and JS to power features like collapsible sections, table of contents navigation, metadata handling, etc.\\n\\nSo in summary, it displays documentation about special server features in an organized way using collapsible sections, navigation, metadata handling, and likely leverages the Writerside API for additional functionality.\&quot;,\&quot;/Writerside/topics/welcome/subsites/custom-enchantments.md\&quot;:\&quot;This file provides information about custom enchantments available on the server.\\n\\nKey functions:\\n\\n- Lists and describes several custom enchantments beyond vanilla Minecraft, including Replenish, Telekinesis, Experience, Beheading, Silent Gaze, and Soulbound. \\n\\n- Provides details for each enchantment like its max level, rarity, applicable items, and any incompatibilities.\\n\\n- Uses Markdown formatting including headers, paragraphs, code blocks, and tables to organize the information clearly.\\n\\n- The purpose is to inform players of additional enchantment options beyond vanilla and explain their effects to enhance gameplay and quality of life on the server.\\n\\nSo in summary, this file defines and documents custom server enchantments for players to learn about additional features and gameplay possibilities.\&quot;,\&quot;/server/webHelpCCS2-all/make-shop.html\&quot;:\&quot;This HTML file provides instructions for how to create a shop in the Community Server.\\n\\nKey functions:\\n\\n- Provides the crafting recipe needed to make a shop block, including the items (gold blocks and chest) and crafting instructions.\\n\\n- Links to other related pages on shop management and creating a shop for more details. \\n\\n- Displays images to illustrate the crafting process. \\n\\n- Formats the content as an article with headings, paragraphs, lists, etc for readability. \\n\\n- Includes metadata like page title, descriptions, links to stylesheets for formatting.\\n\\n- Renders navigation links to go to previous/next pages in the documentation. \\n\\n- Provides a comment section at the bottom for user feedback.\\n\\nSo in summary, it is a documentation page that explains the process and requirements for crafting a shop block item in the game, which is needed to then create an actual shop building/store. The page formatting and linking allows it to be part of a larger help documentation site.\&quot;,\&quot;/server/webHelpCCS2-all/support.html\&quot;:\&quot;This HTML file provides support and refund information for the Community Server.\\n\\nKey functions:\\n\\n- Provides headings and sections for \\\&quot;Support\\\&quot; and \\\&quot;Refunds\\\&quot;\\n- Explains that support is only provided through the Discord ticket system, and private messages to team members cannot be handled\\n- States that only losses caused by server issues and proven with a video will be refunded \\n- Recommends using ShadowPlay or Radeon ReLive to record the last 5 minutes of gameplay in case of issues\\n- Includes last modified date\\n- Includes navigation links to previous and next pages in the documentation\\n- Includes Disqus comment section\\n- Uses JSON scripts to define metadata like page title, description, etc.\\n- Links to external Discord and software pages\\n- Defines the overall page layout and styling\\n\\nSo in summary, it presents the support and refund policies for the server in an accessible HTML documentation format.\&quot;,\&quot;/server/webHelpCCS2-all/custom-enchantments.html\&quot;:\&quot;This HTML file provides documentation on custom enchantments available on the community server.\\n\\nKey functions:\\n\\n- Describes several unique enchantments not found in vanilla Minecraft, including Replenish, Telekinesis, Experience, Beheading, Silent Gaze, and Soulbound. \\n\\n- Provides details on the effects of each enchantment and what level it can be applied up to.\\n\\n- Lists what items each enchantment can be applied to and any incompatibilities. \\n\\n- Uses tables and formatting to clearly display the enchantment information.\\n\\n- Acts as a reference page for players to learn about special server enchantments and their properties. \\n\\n- Integrates with the overall server documentation site through navigation links, breadcrumbs, and templates.\\n\\nSo in summary, it documents and explains the custom enchantments available as part of the community server gameplay, providing useful details and specifications for players.\&quot;,\&quot;/Writerside/topics/welcome/subsites/rules/verified-mods.md\&quot;:\&quot;This file defines a list of verified mods that are allowed to be used on the server.\\n\\nKey functions:\\n\\n- It provides a warning about MouseWheelie being incompatible with the server.\\n\\n- It lists performance mods and shaders as generally being allowed. \\n\\n- It has tabs for listing verified mods from CurseForge and Modrinth mod launchers. Each tab contains a list of mod links.\\n\\n- It includes ReplayMod in the list of allowed mods. \\n\\n- The formatting uses Markdown syntax like headings, lists, links, tabs, etc. to structure the content.\\n\\n- The purpose is to provide players with an official list of mods that have been verified by the server team as safe and compatible to use, to avoid any bans from using unauthorized mods.\\n\\nSo in summary, it defines an approved list of mods for the server and their sources, to help guide players on what client-side mods they can safely install and use.\&quot;,\&quot;/README.md\&quot;:\&quot;This README.md file is for documentation purposes for a project called community-server-docs.\\n\\nKey things about this file:\\n\\n- The filename README.md indicates it is a README (introduction) file written in Markdown format. README files are commonly used to provide introductory information and instructions for a project.\\n\\n- The # community-server-docs heading at the top identifies that this README is for the \\\&quot;community-server-docs\\\&quot; project. \\n\\n- There is no other substantive content in the file - just this project identifying heading and the comment \\\&quot;Nichts kaputt machen\\\&quot; which is German for \\\&quot;Don\\u0027t break anything\\\&quot;.\\n\\n- As a README file, its key functions would be to:\\n  - Provide a brief introduction and overview of the community-server-docs project\\n  - Explain what the project is for at a high level\\n  - Give basic instructions for users/contributors on how to get started with the project\\n  - Potentially outline any installation, build, deployment steps\\n  - Act as a starting point for learning more about the project\\n\\nSo in summary, this README.md file identifies the project and provides a very minimal amount of introductory context for it, but does not yet have the typical detailed explanatory content one would expect in a full README for a project.\&quot;,\&quot;/server/webHelpCCS2-all/cosmetics.html\&quot;:\&quot;This HTML file provides help documentation for the cosmetics feature in the Community Server game. \\n\\nSome key things it does:\\n\\n- Provides an overview of how to access cosmetic item menus using commands like /hdb to get heads for building. \\n\\n- Explains how to right click with a flint to open a menu to modify armor stand properties like adding arms.\\n\\n- Includes an image to illustrate the topic.\\n\\n- Contains formatting like headings, paragraphs, code blocks to structure the content.\\n\\n- Has things like tooltips, links, and prompts to provide additional information. \\n\\n- Includes metadata like the last modified date, as well as prev/next navigation links.\\n\\n- Renders the content within a standardized help page layout/template.\\n\\nSo in summary, it is documentation that helps explain how to use cosmetic items and customize armor stands in the Community Server game through formatted text, images and interactive elements.\&quot;}&quot;}" />
  </component>
</project>